{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validateWith","useState","Math","random","toString","slice","id","touched","setToched","isInvalid","isRequiredEmpty","htmlFor","classNames","type","placeholder","event","target","onBlur","URL_PATTERN","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","urlValidation","valueToValidate","RegExp","test","onSubmit","preventDefault","prevState","disabled","trim","App","moviesFromServer","renderedMovies","setRenderedMovies","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.079cf9d1.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateWith?: (regexp: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validateWith = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const isInvalid = touched && (validateWith && !validateWith(value));\n  const isRequiredEmpty = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': isRequiredEmpty || isInvalid,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {isRequiredEmpty && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {isInvalid && !isRequiredEmpty && (\n        <p className=\"help is-danger\">{`Please enter valid ${label}`}</p>\n      )}\n    </div>\n  );\n};\n","import { FC, FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\n// eslint-disable-next-line max-len\nconst URL_PATTERN = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const resetForm = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleFormSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    setCount(prevState => prevState + 1);\n    resetForm();\n  };\n\n  const urlValidation\n    = (valueToValidate: string) => RegExp(URL_PATTERN).test(valueToValidate);\n\n  const isFormValid = () => {\n    return !title.trim()\n      || !imgUrl.trim()\n      || !imdbUrl.trim()\n      || !imdbId.trim()\n      || !urlValidation(imgUrl)\n      || !urlValidation(imdbUrl);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        validateWith={urlValidation}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        validateWith={urlValidation}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFormValid()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [renderedMovies, setRenderedMovies]\n    = useState<Movie[]>([...moviesFromServer]);\n\n  const handleNewMovie = (movie: Movie) => {\n    setRenderedMovies(prevState => prevState.concat(movie));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={renderedMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}